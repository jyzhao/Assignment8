package UserInterface.ShippingSpecialistRole;

import UserInterface.SalesSpecialistRole.*;
import Business.Business;
import Business.Organization.SalesSpecialistOrganization;
import Business.Organization.Organization;
import Business.Organization.ShippingSpecialistOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.ShipmentWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

public class ShippingSpecialistWorkAreaJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    UserAccount ua;
    ShippingSpecialistOrganization shippingOrg;
    Business business;

    public ShippingSpecialistWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, ShippingSpecialistOrganization organization, Business business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ua = account;
        this.shippingOrg = organization;
        this.business = business;

        populateShipmentRequest();
    }

    private void populateShipmentRequest() {
        DefaultTableModel dtm = (DefaultTableModel) shipmentRequestJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest wr : shippingOrg.getWorkQueue().getWorkRequestList()) {
            Object row[] = new Object[4];
            row[0] = wr;
            row[1] = wr.getSender().getEmployee().getName();
            row[2] = (wr.getReceiver() == null) ? ("N/A") : (wr.getReceiver().getEmployee().getName());
            row[3] = wr.getStatus();

            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        shipmentRequestJTable = new javax.swing.JTable();
        assignJButton = new javax.swing.JButton();
        processJButton = new javax.swing.JButton();
        refreshJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        shipmentRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Message", "Sender", "Receiver", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(shipmentRequestJTable);
        if (shipmentRequestJTable.getColumnModel().getColumnCount() > 0) {
            shipmentRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            shipmentRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            shipmentRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            shipmentRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });

        refreshJButton.setText("Refresh");
        refreshJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshJButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Shipping Specialist Role");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(62, 62, 62)
                                .addComponent(refreshJButton))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(assignJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(processJButton)))
                .addContainerGap(172, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(refreshJButton)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(processJButton))
                .addContainerGap(244, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed

        ShipmentWorkRequest shipmentReq;
        int selectedRow = shipmentRequestJTable.getSelectedRow();
        if (selectedRow >= 0) {
            shipmentReq = (ShipmentWorkRequest) shipmentRequestJTable.getValueAt(selectedRow, 0);
            shipmentReq.setReceiver(ua);
            shipmentReq.setStatus("Pending");
            populateShipmentRequest();
        }
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed

        ShipmentWorkRequest shipmentReq;
        int selectedRow = shipmentRequestJTable.getSelectedRow();
        if (selectedRow >= 0) {
            if (selectedRow >= 0) {
                shipmentReq = (ShipmentWorkRequest) shipmentRequestJTable.getValueAt(selectedRow, 0);
                shipmentReq.setStatus("Processing");

                ProcessShippingRequestJPanel psrjp = new ProcessShippingRequestJPanel(userProcessContainer, shipmentReq);
                userProcessContainer.add("ProcessShipJP", psrjp);
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                layout.next(userProcessContainer);
            }
        }
    }//GEN-LAST:event_processJButtonActionPerformed

    private void refreshJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshJButtonActionPerformed

        populateShipmentRequest();
    }//GEN-LAST:event_refreshJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JButton refreshJButton;
    private javax.swing.JTable shipmentRequestJTable;
    // End of variables declaration//GEN-END:variables
}
